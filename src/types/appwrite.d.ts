import { type Models } from 'appwrite';

// This file is auto-generated by the Appwrite CLI. 
// You can regenerate it by running `appwrite types src/types`.

export enum JobType {
    FIXED_PRICE = "fixed-price",
    HOURLY = "hourly",
    MILESTONE_BASED = "milestone-based"
}

export enum ExperienceLevel {
    ENTRY = "entry",
    INTERMEDIATE = "intermediate",
    EXPERT = "expert"
}

export enum Status {
    OPEN = "open",
    IN_PROGRESS = "in-progress",
    COMPLETED = "completed",
    CANCELLED = "cancelled",
    DISPUTED = "disputed",
    CLOSED = "closed"
}

export enum Visibility {
    PUBLIC = "public",
    INVITE_ONLY = "invite-only",
    PRIVATE = "private"
}

export enum LocationPreference {
    REMOTE = "remote",
    ON_SITE = "on-site",
    HYBRID = "hybrid"
}

export enum Status {
    SUBMITTED = "submitted",
    VIEWED = "viewed",
    SHORTLISTED = "shortlisted",
    ACCEPTED = "accepted",
    REJECTED = "rejected",
    WITHDRAWN = "withdrawn"
}

export enum Status {
    PENDING_FREELANCER_ACCEPTANCE = "pending_freelancer_acceptance",
    ACTIVE = "active",
    PAUSED = "paused",
    COMPLETED = "completed",
    TERMINATED = "terminated",
    DISPUTED = "disputed"
}

export enum EscrowStatus {
    PENDING_FUNDING = "pending_funding",
    FUNDED = "funded",
    PARTIALLY_FUNDED = "partially_funded",
    RELEASING = "releasing",
    RELEASED = "released",
    REFUNDED = "refunded"
}

export enum Status {
    PENDING = "pending",
    SUBMITTED_FOR_APPROVAL = "submitted_for_approval",
    APPROVED = "approved",
    REJECTED = "rejected",
    PAID = "paid"
}

export enum ReviewType {
    CLIENT_FOR_FREELANCER = "client_for_freelancer",
    FREELANCER_FOR_CLIENT = "freelancer_for_client"
}

export enum ProfileType {
    INDIVIDUAL = "individual",
    COMPANY = "company",
    DAO = "dao"
}

export enum VerificationType {
    COMPANY_REGISTRATION = "company_registration",
    KYC = "kyc",
    DOMAIN_OWNERSHIP = "domain_ownership"
}

export enum Status {
    PENDING = "pending",
    APPROVED = "approved",
    REJECTED = "rejected"
}

export enum ConnectionType {
    FOLLOW = "follow",
    FRIEND_REQUEST = "friend_request",
    FRIEND = "friend"
}

export enum Status {
    PENDING = "pending",
    ACTIVE = "active",
    BLOCKED = "blocked",
    DECLINED = "declined"
}

export enum ContentType {
    TEXT = "text",
    IMAGE = "image",
    FILE = "file",
    LINK = "link",
    JOB_SHARE = "job_share",
    USER_PROFILE = "user_profile",
    LANCE = "lance",
    AUDIO = "audio",
    VIDEO = "video"
}

export enum ChatType {
    PRIVATE = "private",
    PUBLIC_JOINABLE = "public_joinable",
    PUBLIC_READONLY = "public_readonly"
}

export enum ContentType {
    TEXT = "text",
    IMAGE = "image",
    FILE = "file",
    POLL = "poll",
    VIDEO = "video",
    LINK = "link",
    JOB_SHARE = "job_share",
    USER_PROFILE = "user_profile",
    LANCE = "lance",
    AUDIO = "audio"
}

export enum WalletType {
    EXTERNAL_EVM = "external_evm",
    EXTERNAL_SOLANA = "external_solana",
    EXTERNAL_BTC = "external_btc",
    EXTERNAL = "external",
    PLATFORM = "platform"
}

export enum Type {
    DEPOSIT = "deposit",
    WITHDRAWAL = "withdrawal",
    ESCROW_FUNDING = "escrow_funding",
    ESCROW_RELEASE = "escrow_release",
    ESCROW_REFUND = "escrow_refund",
    SERVICE_FEE = "service_fee",
    PAYOUT = "payout",
    INTERNAL_TRANSFER = "internal_transfer"
}

export enum Status {
    PENDING = "pending",
    PROCESSING = "processing",
    COMPLETED = "completed",
    FAILED = "failed",
    CANCELLED = "cancelled",
    REQUIRES_ACTION = "requires_action"
}

export enum MethodType {
    CREDIT_CARD = "credit_card",
    BANK_ACCOUNT = "bank_account",
    CRYPTO_WALLET = "crypto_wallet"
}

export enum Status {
    ACTIVE = "active",
    EXPIRED = "expired",
    REVOKED = "revoked"
}

export enum Action {
    FUND = "fund",
    RELEASE = "release",
    REFUND_REQUEST = "refund_request",
    REFUND_APPROVED = "refund_approved",
    DISPUTE_INITIATED = "dispute_initiated"
}

export enum Visibility {
    PUBLIC = "public",
    FOLLOWERS_ONLY = "followers_only",
    CONNECTIONS_ONLY = "connections_only",
    PRIVATE = "private"
}

export enum Status {
    DRAFT = "draft",
    PUBLISHED = "published",
    ARCHIVED = "archived"
}

export enum ItemType {
    JOB = "job",
    POST = "post",
    ARTICLE = "article",
    PROFILE = "profile",
    PORTFOLIO_ITEM = "portfolio_item"
}

export enum Status {
    OPEN = "open",
    UNDER_REVIEW = "under_review",
    VOTING_ACTIVE = "voting_active",
    RESOLVED_BY_VOTE = "resolved_by_vote",
    RESOLVED_BY_MEDIATION = "resolved_by_mediation",
    CLOSED = "closed"
}

export enum VoteChoice {
    FOR_CLIENT = "for_client",
    FOR_FREELANCER = "for_freelancer",
    GENERIC = "generic"
}

export enum Status {
    DISCUSSION = "discussion",
    VOTING_ACTIVE = "voting_active",
    ACCEPTED = "accepted",
    REJECTED = "rejected",
    IMPLEMENTED = "implemented"
}

export enum Type {
    NEW_PROPOSAL = "new_proposal",
    PROPOSAL_ACCEPTED = "proposal_accepted",
    CONTRACT_STARTED = "contract_started",
    MILESTONE_APPROVED = "milestone_approved",
    PAYMENT_RECEIVED = "payment_received",
    NEW_MESSAGE = "new_message",
    NEW_FOLLOWER = "new_follower",
    POST_LIKED = "post_liked",
    DISPUTE_UPDATE = "dispute_update",
    MENTION = "mention"
}

export enum Status {
    SUCCESS = "success",
    FAILURE = "failure"
}

export type Jobs = Models.Document & {
    title: string;
    description: string;
    tags: string[] | null;
    createdAt: string | null;
    updatedAt: string | null;
    clientId: string;
    jobType: JobType;
    budgetMin: number | null;
    budgetMax: number | null;
    currency: string;
    skillsRequired: string[] | null;
    experienceLevel: ExperienceLevel | null;
    duration: string | null;
    attachmentsFileIds: string[] | null;
    status: Status;
    visibility: Visibility;
    deadline: string | null;
    locationPreference: LocationPreference;
    onSiteLocation: string | null;
    proposalsCount: number;
    hiresCount: number;
    maxHires: number;
    bookmarksCount: number;
}

export type Proposals = Models.Document & {
    jobId: string;
    freelancerId: string;
    coverLetter: string;
    proposedRate: number | null;
    estimatedDeliveryTime: string | null;
    attachmentsFileIds: string[] | null;
    status: Status;
    clientNotes: string | null;
    submittedAt: string | null;
    updatedAt: string | null;
}

export type Contracts = Models.Document & {
    String: string;
    proposalId: string | null;
    clientId: string;
    freelancerId: string;
    terms: string;
    contractType: string;
    agreedRate: number;
    currency: string;
    startDate: string | null;
    endDate: string | null;
    status: Status;
    escrowStatus: EscrowStatus | null;
    escrowTransactionId: string | null;
    totalPaid: number;
    createdAt: string | null;
    updatedAt: string | null;
}

export type Milestones = Models.Document & {
    contractId: string;
    description: string;
    amount: number;
    dueDate: string | null;
    status: Status;
    submissionFileIds: string[] | null;
    clientFeedback: string | null;
    paymentTransactionId: string | null;
    createdAt: string | null;
    updatedAt: string | null;
}

export type Reviews = Models.Document & {
    contractId: string;
    reviewerId: string;
    revieweeId: string;
    reviewType: ReviewType;
    rating: number;
    comment: string | null;
    publicFeedback: string | null;
    privateFeedback: string | null;
    reviewCriteria: string | null;
    isAnonymous: boolean;
    createdAt: string | null;
}

export type Profiles = Models.Document & {
    userId: string;
    name: string | null;
    email: string | null;
    bio: string | null;
    skills: string[] | null;
    profilePicture: string | null;
    createdAt: string | null;
    updatedAt: string | null;
    username: string | null;
    avatarFileId: string | null;
    coverImageFileId: string | null;
    tagline: string | null;
    location: string | null;
    timezone: string | null;
    portfolioLink: string | null;
    socialLinks: string | null;
    reputationScore: number;
    isVerified: boolean;
    isActive: boolean;
    preferences: string | null;
    wallets: string | null;
    profileType: ProfileType | null;
    roles: string[] | null;
}

export type ProfileVerifications = Models.Document & {
    profileId: string;
    verificationType: VerificationType;
    documentFileIds: string[] | null;
    status: Status;
    notes: string | null;
    submittedAt: string | null;
    reviewedAt: string | null;
    reviewedBy: string | null;
}

export type Connections = Models.Document & {
    followerId: string;
    followingId: string;
    connectionType: ConnectionType;
    status: Status;
    createdAt: string | null;
    updatedAt: string | null;
}

export type Messages = Models.Document & {
    chatId: string;
    senderId: string;
    receiverId: string;
    content: string;
    contentType: ContentType;
    fileId: string | null;
    metadata: string | null;
    isRead: boolean;
    readAt: string | null;
    sentAt: string | null;
    deletedByReceiver: boolean;
    deletedBySender: boolean;
    reactions: string | null;
    lastMessageAt: string | null;
    lastMessageSnippet: string | null;
}

export type GroupChats = Models.Document & {
    name: string;
    description: string | null;
    avatarFileId: string | null;
    creatorId: string;
    memberIds: string[] | null;
    memberCount: number;
    adminIds: string[] | null;
    chatType: ChatType;
    lastMessageAt: string | null;
    lastMessageSnippet: string | null;
    createdAt: string | null;
    updatedAt: string | null;
}

export type GroupMessages = Models.Document & {
    groupId: string;
    senderId: string;
    content: string;
    contentType: ContentType;
    fileId: string | null;
    metadata: string | null;
    readBy: string[] | null;
    reactions: string | null;
    sentAt: string | null;
    deletedBySender: boolean;
    deletedByReceiver: string[] | null;
}

export type Feeds = Models.Document & {
}

export type Wallets = Models.Document & {
    profileId: string;
    walletAddress: string;
    walletType: WalletType;
    blockchain: string;
    isPrimary: boolean;
    nickname: string | null;
    balance: string | null;
    linkedAt: string | null;
    lastVerifiedAt: string | null;
}

export type Transactions = Models.Document & {
    transactionId: string;
    profileId: string;
    type: Type;
    status: Status;
    amount: number;
    currency: string;
    blockchain: string | null;
    onChainTxHash: string | null;
    fromAddress: string | null;
    toAddress: string | null;
    relatedContractId: string | null;
    relatedMilestoneId: string | null;
    description: string | null;
    metadata: string | null;
    feeAmount: number;
    netAmount: number | null;
    createdAt: string | null;
    updatedAt: string | null;
    completedAt: string | null;
}

export type PaymentMethods = Models.Document & {
    profileId: string;
    methodType: MethodType;
    provider: string | null;
    providerToken: string | null;
    details: string | null;
    isDefault: boolean;
    status: Status | null;
    addedAt: string | null;
}

export type EscrowTransactions = Models.Document & {
    contractId: string;
    action: Action;
    actorId: string;
    amount: number | null;
    currency: string | null;
    notes: string | null;
    transactionId: string | null;
    createdAt: string | null;
}

export type Posts = Models.Document & {
    authorId: string;
    content: string;
    media: string | null;
    tags: string[] | null;
    mentions: string[] | null;
    visibility: Visibility;
    likesCount: number;
    commentsCount: number;
    repostsCount: number;
    parentPostId: string | null;
    originalPostId: string | null;
    createdAt: string | null;
    updatedAt: string | null;
    bookmarksCount: number;
    viewsCount: number;
}

export type PostInteractions = Models.Document & {
    postId: string;
    userId: string;
    createdAt: string | null;
    interactions: string;
}

export type Portfolios = Models.Document & {
    profileId: string;
    title: string;
    description: string;
    coverImageFileId: string | null;
    mediaFileIds: string[] | null;
    projectUrl: string | null;
    skillsUsed: string[] | null;
    tags: string[] | null;
    completedDate: string | null;
    createdAt: string | null;
    updatedAt: string | null;
}

export type Articles = Models.Document & {
    authorId: string;
    title: string;
    slug: string;
    content: string;
    excerpt: string | null;
    coverImageFileId: string | null;
    tags: string[] | null;
    status: Status | null;
    publishedAt: string | null;
    viewsCount: number;
    likesCount: number;
    commentsCount: number;
    createdAt: string | null;
    updatedAt: string | null;
    bookmarksCount: number;
}

export type Bookmarks = Models.Document & {
    profileId: string;
    itemId: string;
    itemType: ItemType;
    notes: string | null;
    tags: string[] | null;
    createdAt: string | null;
}

export type Disputes = Models.Document & {
    contractId: string;
    initiatorId: string;
    respondentId: string;
    reason: string;
    evidenceFileIds: string[] | null;
    respondentEvidenceFileIds: string[] | null;
    status: Status | null;
    resolutionDetails: string | null;
    assignedModeratorId: string | null;
    createdAt: string | null;
    updatedAt: string | null;
    resolvedAt: string | null;
}

export type Votes = Models.Document & {
    disputeId: string;
    voterId: string;
    voteChoice: VoteChoice;
    votingPower: number;
    rationale: string | null;
    castAt: string | null;
}

export type PlatformProposals = Models.Document & {
    proposerId: string;
    title: string;
    description: string;
    proposalType: string;
    status: Status;
    discussionLink: string | null;
    votingStartDate: string | null;
    votingEndDate: string | null;
    votesFor: number;
    votesAgainst: number;
    votesAbstain: number;
    createdAt: string | null;
    updatedAt: string | null;
}

export type Notifications = Models.Document & {
    recipientId: string;
    type: Type;
    title: string;
    link: string | null;
    message: string;
    isRead: boolean;
    readAt: string | null;
    actorId: string | null;
    itemId: string | null;
    itemType: string | null;
    createdAt: string | null;
}

export type AuditLogs = Models.Document & {
    actorId: string | null;
    actorIp: string | null;
    actionType: string;
    targetResourceId: string | null;
    targetResourceType: string | null;
    details: string | null;
    status: Status;
    timestamp: string | null;
}

export type Skills = Models.Document & {
    name: string;
    category: string | null;
    description: string | null;
    isVerified: boolean;
    usageCount: number;
}

export type Categories = Models.Document & {
    name: string;
    slug: string;
    parentCategoryId: string | null;
    description: string | null;
    icon: string | null;
}

export type PlatformSettings = Models.Document & {
    settingKey: string;
    settingValue: string;
    description: string | null;
    lastUpdatedBy: string | null;
    updatedAt: string | null;
}
